#%RAML 1.0
title: petshop
description: Pet Shop Api
version: 0.0
baseUri: http://localhost:8081/petshop/v0

uses:
  petshop:  types/petshop.raml
  petshops:  types/petshops.raml
  service:  types/service.raml
  services:  types/services.raml
  accesory:  types/accesory.raml
  animal:  types/animal.raml
  clients:  types/clients.raml
  client:  types/client.raml
  appointment:  types/appointment.raml
  appointment:  types/appointments.raml
  schedule: types/schedule.raml
  schedules: types/schedules.raml
  contacts:  types/contacts.raml
  contact:  types/contact.raml
  employee:  types/employee.raml
  food:  types/food.raml
  product:  types/product.raml
  sale:  types/sale.raml
  accesory:  types/accesory.raml
  product: types/product.raml
  pagination: glapi-global-apis-commons-commons/types/pagination.raml

annotations:
  annotationsLibrary: !include glapi-global-apis-commons-commons/annotations/annotationsLibrary.raml
  enumDescription: !include glapi-global-apis-commons-commons/annotations/enumDescription.raml
  bindingDefinition: !include glapi-global-apis-commons-commons/annotations/bindingDefinition.raml

resourceTypes: 
  collection: !include glapi-global-apis-commons-commons/resourceTypes/collection.raml

traits: 
  pageable: !include glapi-global-apis-commons-commons/traits/pageable.raml
  expandable: !include glapi-global-apis-commons-commons/traits/expandable.raml

/petshops:
  description: petshops in the town
  type: collection
  get:
    description: List of all petshops
    is: [pageable, expandable]
    queryParameters:
      petshop-id:
        description: petshop id
        type: string
        required: false
        example: "1"
      contact-id: 
        description: id of contact entity, that represent relation between petshop-contact
        type: string
        required: false
        example: "3"
      name: 
        description: name of petshop
        type: string
        required: false
        example: "Huellas Pet shop"
    responses:
      200: 
        description: Get all petshops, with status: OK
        body:
          application/json:
            type: petshop.petshops
            example: !include examples/petshops/get_200.json
  post:
    description: Create a new petshop
    body:
      application/json:
        example: !include examples/petshops/post_request.json
        description: JSON input example for the call POST /petshops
        displayName: Full JSON input example
    responses: 
      200:
        description: Petshop successful created
        body:
          application/json:
            type: petshop.petshop
            example: !include examples/petshops/post_200.json

  /{petshop-id}:
    description: Resource for managing the detail of the pet shop
    type: collection-item
    uriParameters: 
      petshop-id: 
        type: string
        description: identifier of petshop
    get:
      description: Service for retrieving the detail of a pet shop
      responses:
        200: 
          description: Get detail about petshop
          body:
            application/json:
              type: petshop.petshop
              example: !include examples/petshops/petshop_id/get_200.json
    put:
      description: Resource to manage the update of the registration of the pet store, except its identifier.
      body:
        application/json:
          type: petshop.petshop
          example: !include examples/petshops/petshop_id/put_request.json
      responses:
        200: 
          description: Petshop successful updated
          body:
            application/json:
              type: petshop.petshop
              example: !include examples/petshops/petshop_id/put_200.json
    patch:
      description: Resource to manage the partial update of the pet store registration, except its identifier.
      body:
        application/json:
          type: petshop.petshop
          example: !include examples/petshops/petshop_id/patch_request.json
      responses:
        200: 
          description: Petshop partial successful updated
          body:
            application/json:
              type: petshop.petshop
              example: !include examples/petshops/petshop_id/patch_200.json
    delete:
      description: Service for delete a pet store.
      responses:
        204:
          description: No Content.
/accesories:
  description: |
   accesories in the shop
  type: collection
  get: 
    is: [pageable]
    description: |
      accesories list
    queryParameters:
      accesory.id:
        description: |
          accesory id
        type: number
        required: true
        example: 1
      accesory.type:
        description: |
          accesory type
        type: string
        required: true
        example: "Food plate"
      accesory.color:
        description: |
          accesory color
        type: string
        required: true
        example: "Blue"
      accesory.material:
        description: |
          accesory material
        type: string
        required: true
        example: "plastic"
      accesory.brand:
        description: |
          accesory brand
        type: string
        required: true
        example: "Cobe"
    responses: 
      200:
        body: 
          application/json:
            type: accesories
            example: !include examples/accesories/get_200.json
  post:
    body: 
      application/json:
        properties: 
          accesory.type:
            type: string
            required: true
            example: "Food plate"
          accesory.color:
            type: string
            required: true
            example: "Orange"
          accesory.material:
            type: string
            required: true
            example: "Plastic"
          accesory.brand:
            type: string
            required: true
            example: "Cobe"
    responses: 
      200:
        body: 
          application/json:
            type: accesory
            example: !include examples/accesories/post_200.json
  /{accesory-id}:
    get:
      uriParameters:
        accesory-id:
          type: number
          description: accesory identifier
      responses:
        200:
          body: 
            application/json:
              type: accesory
              example: !include examples/accesories/accesory_id/get_200.json
    put:
      body:
        application/json:
          properties:
            accesory.type:
              type: string
              required: true
              example: "Food plate"
            accesory.color:
              type: string
              required: true
              example: "Blue"
            accesory.material:
              type: string
              required: true
              example: "Plastic"
            accesory.brand:
              type: string
              required: true
              example: "Cobe"
      responses: 
        200:
          body: 
            application/json:
              example: !include examples/accesories/accesory_id/put_200.json
    patch:
      body:
        application/json:
          properties:
            accesory.type:
              type: string
              required: true
              example: "Food plate"
            accesory.color:
              type: string
              required: true
              example: "Brown"
            accesory.material:
              type: string
              required: true
              example: "Plastic"
            accesory.brand:
              type: string
              required: true
              example: "Cobe"
      responses: 
        200:
          body: 
            application/json:
              example: !include examples/accesories/accesory_id/patch_200.json
    delete:
      responses:
        200:
          body:
            application/json:
              example: !include examples/accesories/accesory_id/delete_200.json
/animals:
  description: |
    animals in the shop
  type: collection
  get: 
    is: [pageable]
    description: |
      animals list
    queryParameters: 
      animal.id:
        description: |
          animal id
        type: number
        required: true
        example: 1
      animal.specie:
        description: |
          animal species
        type: enum
        enum: 
          - dog
          - cat
          - bird
          - fish
          - reptile
        required: true
        example: [dog, cat, bird, fish, reptile]
      animal.age:
        description: |
          animal's age
        type: number
        required: true
        example: 2
      animal.weight:
        description: |
          animal's weight
        type: number
        required: false
        example: 5
      animal.size:
        description: |
          animal's size
        type: enum
        enum:
          - small
          - medium
          - big
        required: true
        example: [small, medium, big] 
      animal.color:
        description: |
          animal's color
        type: string
        required: false
        example: "beige"
      animal.type:
        description: |
          animal's type
        type: enum
        enum: 
          - husky
          - labrador
          - persian
          - siamese
          - turtle
          - chamaleon
          - parakeet
          - canary
          - goldfish
          - angelfish
        required: true
        example: [husky, labrador, persian, siamese, turtle, chamaleon, parakeet, canary, goldfish, angelfish]
    responses: 
        200:
          body: 
            application/json:
              type: animals
              example: !include examples/animals/get_200.json
  post:
    body: 
      application/json:
        properties:
          animal.specie:
            type: enum
            enum: 
              - dog
              - cat
              - bird
              - fish
              - reptile
            required: true
            example: [dog, cat, bird, fish, reptile]
          animal.age:
            type: number
            required: true
            example: 2
          animal.weight:
            type: number
            required: false
            example: 5
          animal.size:
            type: enum
            enum:
              - small
              - medium
              - big
            required: true
            example: [small, medium, big] 
          animal.color:
            type: string
            required: false
            example: "beige"
          animal.type:
            type: enum
            enum: 
              - husky
              - labrador
              - persian
              - siamese
              - turtle
              - chamaleon
              - parakeet
              - canary
              - goldfish
              - angelfish
            required: true
            example: [husky, labrador, persian, siamese, turtle, chamaleon, parakeet, canary, goldfish, angelfish]
    responses: 
        200:
          body: 
            application/json:
              type: animals
              example: !include examples/animals/post_200.json
      
  /{animal-id}:
    get:
      uriParameters:
        animal-id:
          type: string
          description: animal's identifier
      responses: 
        200:
          body: 
            application/json:
              type: animal
              example: !include examples/animals/animal_id/get_200.json
    put:
      body:
        application/json:
          properties:
            animal.specie:
              type: enum
              enum: 
                - dog
                - cat
                - bird
                - fish
                - reptile
              required: true
              example: [dog, cat, bird, fish, reptile]
            animal.age:
              type: number
              required: true
              example: 2
            animal.weight:
              type: number
              required: false
              example: 5
            animal.size:
              type: enum
              enum:
                - small
                - medium
                - big
              required: true
              example: [small, medium, big] 
            animal.color:
              type: string
              required: false
              example: "beige"
            animal.type:
              type: enum
              enum: 
                - husky
                - labrador
                - persian
                - siamese
                - turtle
                - chamaleon
                - parakeet
                - canary
                - goldfish
                - angelfish
              required: true
              example: [husky, labrador, persian, siamese, turtle, chamaleon, parakeet, canary, goldfish, angelfish]
      responses: 
        200:
          body: 
            application/json:
              example: !include examples/animals/animal_id/put_200.json
    patch:
      body:
        application/json:
          properties:
            animal.specie:
              type: enum
              enum: 
                - dog
                - cat
                - bird
                - fish
                - reptile
              required: true
              example: [dog, cat, bird, fish, reptile]
            animal.age:
              type: number
              required: true
              example: 2
            animal.weight:
              type: number
              required: false
              example: 5
            animal.size:
              type: enum
              enum:
                - small
                - medium
                - big
              required: true
              example: [small, medium, big] 
            animal.color:
              type: string
              required: false
              example: "beige"
            animal.type:
              type: enum
              enum: 
                - husky
                - labrador
                - persian
                - siamese
                - turtle
                - chamaleon
                - parakeet
                - canary
                - goldfish
                - angelfish
              required: true
              example: [husky, labrador, persian, siamese, turtle, chamaleon, parakeet, canary, goldfish, angelfish]
      responses: 
        200:
          body: 
            application/json:
              example: !include examples/animals/animal_id/patch_200.json
    delete:
      responses:
        200:
          body:
            application/json:
              example: !include examples/animals/animal_id/delete_200.json
/sales:
  description: |
   sales of the shop
  type: collection
  get:
    is: [pageable, expandable]
    description: |
      petshops lists
    queryParameters:
      sales.sale_id:
        description: |
          sale id
        type: string
        required: false
        example: 1
      sales.num_ticket:
        description: |
          ticket number of the sale
        type: string
        required: false
        example: "5543245"
      sales.total_amount:
        description: |
          total amount of the sale
        type: number
        required: false
        example: 400.00
      sales.invoice:
        description: |
          invoice of the sale
        type: string
        required: false
        example: "axxx-vsdf-534-sfdf"
      sales.method_payment:
        description: |
          payment method of the sale
        type: string
        required: false
        example: "cash"
      sales.petshop_id:
        description: |
            petShop identifier
          type: string
          required: false
          example: "1"
      sales.client_id:
        description: |
          petShop identifier
        type: string
        required: false
        example: "106"
      sales.product_id:
        description: |
          petShop identifier
        type: string
        required: false
        example: "22"
      sales.employee_id:
        description: |
          petShop identifier
        type: string
        required: false
        example: "12"
    responses:
      200:
        body:
          application/json:
            type: sales
            example: !include examples/sales/get_200.json


  post:
    description: |
      Service to register a pet store.
    body: 
      application/json:
        example: !include examples/sales/post_request.json
        description: JSON input example for the call POST /sales
        displayName: Full JSON input example
        type: sales.sales
    responses: 
      200:
        body: 
          application/json:
            type: sale
            example: !include examples/sales/post_200.json
  /{sale-id}:
    get:
      uriParameters:
        sale_id:
          type: number
          description: sale identifier
      responses:
        200:
          body: 
            application/json:
              type: sale
              example: !include examples/sales/sale_id/get_200.json
    put:
      body:
        application/json:
          properties:
            sale_id:
              type: string
              required: false
              example: 1
            num_ticket:
              type: string
              required: false
              example: "5543245"
            total_amount:
              type: number
              required: false
              example: 400.00
            invoice:
              type: string
              required: false
              example: "axxx-vsdf-534-sfdf"
            method_payment:
              type: string
              required: false
              example: "cash"
            petshop_id:
              type: string
              required: false
              example: "1"
            client_id:
              type: string
              required: false
              example: "106"
            product_id:
              type: string
              required: false
              example: "22"
            employee_id:
              type: string
              required: false
              example: "12"
      responses: 
        200:
          body: 
            application/json:
              example: !include examples/sales/sale_id/put_200.json
    patch:
      body:
        application/json:
          properties:
            sale_id:
              type: string
              required: false
              example: 1
            num_ticket:
              type: string
              required: false
              example: "5543245"
            total_amount:
              type: number
              required: false
              example: 400.00
            invoice:
              type: string
              required: false
              example: "axxx-vsdf-534-sfdf"
            method_payment:
              type: string
              required: false
              example: "cash"
            petshop_id:
              type: string
              required: false
              example: "1"
            client_id:
              type: string
              required: false
              example: "106"
            product_id:
              type: string
              required: false
              example: "22"
            employee_id:
              type: string
              required: false
              example: "12"
      responses: 
        200:
          body: 
            application/json:
              example: !include examples/sales/sale_id/patch_200.json
    delete:
      responses:
        200:
          body:
            application/json:
              example: !include examples/sales/sale_id/delete_200.json
/clients:
  description: clients registered in petshop
  type: collection
  get:
    description: List of all clients that exist in petshop
    is: [pageable, expandable]
    queryParameters:
      client-id:
        description: id of client
        type: string
        required: false
        example: 1
      age:
        description: client age
        type: number
        required: false
        example: 31
      pet:
        description: Description of client pet
        type: string
        required: false
        example: "Dog"
      contact-id:
        description: id of contact entity, that represent relation between client-contact
        type: string
        required: false
        example: 3
      petshop-id:
        description: id of pet shop entity, that represent relation between client-petshop
        type: string
        required: false
        example: 1
    responses:
      200:
        description: Get all clients that exist in petshop, with status: OK
        body:
          application/json:
            type: petshop.clients
            example: !include examples/clients/get_200.json
  post:
    description: Create a new client for petshop
    body:   
      application/json:
        example: !include examples/clients/post_request.json
        description: JSON input example for the call POST /clients
        displayName: Full JSON input example
    responses:
        200:
          description: Client successful created
          body:
            application/json:
              type: petshop.client
              example: !include examples/clients/post_200.json
  /{client-id}:
    description: Resource for managing the detail of the client
    type: collection-item
    uriParameters: 
      client-id: 
        type: string
        description: identifier of client
    get:
      description: Service for retrieving the detail of a client
      responses:
        200:
          description: Get detail about a client
          body:
            application/json:
              type: petshop.client
              example: !include examples/clients/client_id/get_200.json
    put:
      description: Resource to manage the update of the registration of the client, except its identifier.
      body:
        application/json:
          type: petshop.client
          example: !include examples/clients/client_id/put_request.json
      responses:
        200: 
          description: Client successful updated
          body:
            application/json:
              type: petshop.client
              example: !include examples/clients/client_id/put_200.json
    patch:
      description: Resource to manage the partial update of the client registration, except its identifier.
      body:
        application/json:
          type: petshop.client
          example: !include examples/clients/client_id/patch_request.json
      responses:
        200: 
          description: Client partial successful updated
          body:
            application/json:
              type: petshop.client
              example: !include examples/clients/client_id/patch_200.json
    delete:
      description: Service for delete a client.
      responses:
        204:
          description: No Content.
/dates:
  description: Used for interact with information about dates
  type: collection
  get:
    description: |
      Get information about my appointments
    is: pageable, expandable
    queryParameters: 
      appointment-id:
        description: |
          appointment id
        type: string
        required: false
        example: '1964401'
      description:
        description: |
          appointment description
        type: string
        required: false
        example: 'Shower'
      price:
        description: |
          price of dates
        type: number
        required: false
        example: 100
      service-id:
        description: |
          depend of my service id
        type: string
        required: false
        example: 1
      petshop-id:
        description: |
          depend of petshop id
        type: string
        required: false
        example: 100
      client-id:
        description: |
          depend of client id
        type: string
        required: false
        example: 100
      schedule-id:
        description: |
          depend of client id
        type: string
        required: false
        example: 110
    responses: 
      200:
        description: Ok: Successful response, get dates
        body:
          application/json:
            type: appointments
            example: !include examples/appointments/get_200.json
  post:
    description: |
      Create a new appointment
    body:
      application/json:
        example: !include examples/appointments/post_request.json
        description: JSON input example for the call POST /appointments
        displayName: Full JSON input example
        type: petshop.appointment
    responses: 
      200:
        description: Ok: Successful created
        body:
          application/json:
            example: |
              { 
                "status": 200, 
                "message": "Successful created!" 
              }
            type: appointments
  /{appointment-id}:
    description: |
      Detail of appointment from id
    type: collection-item
    uriParameters:
      appointment-id:
        type: string
        description: ID unique for my date
    get:
      description: |
        Get information about date, from appointment
      responses:
        200:
          description: Ok: Successful response, get dates
          body:
            application/json:
              type: petshop.appointment
              example: !include examples/appointments/appointment-id/get_200.json 
    put:
      description: | 
        Update all information for one register of date from appointment
      body:
        application/json:
          example: !include examples/appointments/appointment-id/put_request.json
          type: petshop.appointment
      responses: 
        200:
          description: Ok: Successful response, update information (All)
          body:
            application/json:
              type: object
              example: |
                { 
                  "status": 200, 
                  "message": "Successful updated! (All)" 
                }
      patch:
        description: |
          Update partial information for one register of date from appointment
        body:
          application/json:
            example: !include examples/appointments/appointment-id/patch_request.json
            type: petshop.appointment
        responses: 
          200:
            description: Ok: Successful response, update information (partial)
            body:
              application/json:
                example: |
                  { 
                    "status": 200, 
                    "message": "Successful updated! (Partial)" 
                  }
                type: petshop.appointment
          data: 
            type: petshop.appointment
          204: 
            description: No Content.
      delete:
        description: |
          Delete information about date, from appointment
        responses:
          204:
          description: No Content.
  /{description}:
    description: |
      Detail of description
    type: collection-item
    uriParameters:
      description:
        type: string
        description: ID unique for my date
    get:
      description: |
        Get information about description
      responses:
        200:
          description: Ok: Successful response, get description
          body:
            application/json:
              type: petshop.appointment
              example: !include examples/appointments/description/get_200.json 
    put:
      description: | 
        Update all information for one description
      body:
        application/json:
          example: !include examples/appointments/description/put_request.json
          type: petshop.appointment
      responses: 
        200:
          description: Ok: Successful response, update information (All)
          body:
            application/json:
              type: object
              example: |
                { 
                  "status": 200, 
                  "message": "Successful updated! (All)" 
                }
      patch:
        description: |
          Update partial information for one description
        body:
          application/json:
            example: !include examples/appointments/description/patch_200.json
            type: petshop.appointment
        responses: 
          200:
            description: Ok: Successful response, update information (partial)
            body:
              application/json:
                example: |
                  { 
                    "status": 200, 
                    "message": "Successful updated! (Partial)" 
                  }
                type: petshop.appointment
          data: 
            type: petshop.appointment
          204: 
            description: No Content.
      delete:
        description: |
          Delete information about date, from appointment
        responses:
          204:
          description: No Content.
  /{price}:
    description: |
      Detail of price
    type: collection-item
    uriParameters:
      price:
        type: string
        description: ID unique for price
    get:
      description: |
        Get information price
      responses:
        200:
          description: Ok: Successful response, get price
          body:
            application/json:
              type: petshop.appointment
              example: !include examples/appointments/price/get_200.json 
    put:
      description: | 
        Update all information for one price
      body:
        application/json:
          example: !include examples/appointments/price/put_request.json
          type: petshop.appointment
      responses: 
        200:
          description: Ok: Successful response, update information (All)
          body:
            application/json:
              type: object
              example: |
                { 
                  "status": 200, 
                  "message": "Successful updated! (All)" 
                }
      patch:
        description: |
          Update partial information for price
        body:
          application/json:
            example: !include examples/appointments/price/patch_200.json
            type: petshop.appointment
        responses: 
          200:
            description: Ok: Successful response, update information (partial)
            body:
              application/json:
                example: |
                  { 
                    "status": 200, 
                    "message": "Successful updated! (Partial)" 
                  }
                type: petshop.appointment
          data: 
            type: petshop.appointment
          204: 
            description: No Content.
      delete:
        description: |
          Delete information about price
        responses:
          204:
          description: No Content.
/schedules:
  description: |
    Used for interact with information about schedules
  type: collection
  get:
    description: |
      Get information about my schedules
    is: pageable, expandable
    queryParameters: 
      schedule-id:
        description: |
          schedule id
        type: string
        required: false
        example: '1964401'
      day:
        description: |
          schedule day
        type: number
        required: false
        example: 30
      month:
        description: |
          schedule month
        type: string
        required: false
        example: 'January'
      year:
        description: |
          schedule year
        type: number
        required: false
        example: 2019
      time:
        description: |
          schedule time
        type: string
        required: false
        example: '10:00am'
    responses: 
      200:
        description: Ok: Successful response, get schedule
        body:
          application/json:
            type: schedules
            example: !include examples/schedules/get_200.json
  post:
    description: |
      Create a new schedule
    body:
      application/json:
        example: !include examples/schedules/post_request.json
        description: JSON input example for the call POST /schedules
        displayName: Full JSON input example
        type: petshop.schedule
    responses: 
      200:
        description: Ok: Successful created
        body:
          application/json:
            example: |
              { 
                "status": 200, 
                "message": "Successful created!" 
              }
            type: schedules
  /{schedule-id}:
    description: |
      Detail of schedule from id
    type: collection-item
    uriParameters:
      schedule-id:
        type: string
        description: ID unique for schedule
    get:
      description: |
        Get information about id, from schedule
      responses:
        200:
          description: Ok: Successful response, get schedule
          body:
            application/json:
              type: petshop.schedule
              example: !include examples/schedules/schedule-id/get_200.json 
    put:
      description: | 
        Update all information for one register of schedule
      body:
        application/json:
          example: !include examples/schedules/schedule-id/put_request.json
          type: petshop.schedule
      responses: 
        200:
          description: Ok: Successful response, update information (All)
          body:
            application/json:
              type: object
              example: |
                { 
                  "status": 200, 
                  "message": "Successful updated! (All)" 
                }
      patch:
        description: |
          Update partial information for one schedule
        body:
          application/json:
            example: !include examples/schedules/schedule-id/patch_200.json
            type: petshop.schedule
        responses: 
          200:
            description: Ok: Successful response, update information (partial)
            body:
              application/json:
                example: |
                  { 
                    "status": 200, 
                    "message": "Successful updated! (Partial)" 
                  }
                type: petshop.schedule
          data: 
            type: petshop.schedule
          204: 
            description: No Content.
      delete:
        description: |
          Delete information about schedule
        responses:
          204:
          description: No Content.
  /{day}:
    description: |
      Detail of day
    type: collection-item
    uriParameters:
      day:
        type: number
        description: Day of schedule
    get:
      description: |
        Get information about day schedule
      responses:
        200:
          description: Ok: Successful response, get description
          body:
            application/json:
              type: petshop.schedule
              example: !include examples/schedules/day/get_200.json 
    put:
      description: | 
        Update all information for one day
      body:
        application/json:
          example: !include examples/schedules/day/put_request.json
          type: petshop.schedule
      responses: 
        200:
          description: Ok: Successful response, update information (All)
          body:
            application/json:
              type: object
              example: |
                { 
                  "status": 200, 
                  "message": "Successful updated! (All)" 
                }
      patch:
        description: |
          Update partial information for a day
        body:
          application/json:
            example: !include examples/schedules/day/patch_200.json
            type: petshop.schedule
        responses: 
          200:
            description: Ok: Successful response, update information (partial)
            body:
              application/json:
                example: |
                  { 
                    "status": 200, 
                    "message": "Successful updated! (Partial)" 
                  }
                type: petshop.schedule
          data: 
            type: petshop.schedule
          204: 
            description: No Content.
      delete:
        description: |
          Delete information about day, from schedule
        responses:
          204:
          description: No Content.
  /{month}:
    description: |
      Detail of month schedule
    type: collection-item
    uriParameters:
      month:
        type: string
        description: Month of schedule
    get:
      description: |
        Get information month
      responses:
        200:
          description: Ok: Successful response, get month
          body:
            application/json:
              type: petshop.schedule
              example: !include examples/schedules/month/get_200.json 
    put:
      description: | 
        Update all information for one month
      body:
        application/json:
          example: !include examples/schedules/month/put_request.json
          type: petshop.schedule
      responses: 
        200:
          description: Ok: Successful response, update information (All)
          body:
            application/json:
              type: object
              example: |
                { 
                  "status": 200, 
                  "message": "Successful updated! (All)" 
                }
      patch:
        description: |
          Update partial information for month
        body:
          application/json:
            example: !include examples/schedules/month/patch_200.json
            type: petshop.schedule
        responses: 
          200:
            description: Ok: Successful response, update information (partial)
            body:
              application/json:
                example: |
                  { 
                    "status": 200, 
                    "message": "Successful updated! (Partial)" 
                  }
                type: petshop.schedule
          data: 
            type: petshop.schedule
          204: 
            description: No Content.
      delete:
        description: |
          Delete information about month
        responses:
          204:
          description: No Content.
  /{year}:
    description: |
      Detail of year schedule
    type: collection-item
    uriParameters:
      year:
        type: number
        description: year of schedule
    get:
      description: |
        Get information year
      responses:
        200:
          description: Ok: Successful response, get year
          body:
            application/json:
              type: petshop.schedule
              example: !include examples/schedules/year/get_200.json 
    put:
      description: | 
        Update all information for one year
      body:
        application/json:
          example: !include examples/schedules/year/put_request.json
          type: petshop.schedule
      responses: 
        200:
          description: Ok: Successful response, update information (All)
          body:
            application/json:
              type: object
              example: |
                { 
                  "status": 200, 
                  "message": "Successful updated! (All)" 
                }
      patch:
        description: |
          Update partial information for year
        body:
          application/json:
            example: !include examples/schedules/year/patch_200.json
            type: petshop.schedule
        responses: 
          200:
            description: Ok: Successful response, update information (partial)
            body:
              application/json:
                example: |
                  { 
                    "status": 200, 
                    "message": "Successful updated! (Partial)" 
                  }
                type: petshop.schedule
          data: 
            type: petshop.schedule
          204: 
            description: No Content.
      delete:
        description: |
          Delete information about year
        responses:
          204:
          description: No Content.
  /{time}:
    description: |
      Detail of time schedule
    type: collection-item
    uriParameters:
      time:
        type: string
        description: time of schedule
    get:
      description: |
        Get information time
      responses:
        200:
          description: Ok: Successful response, get time
          body:
            application/json:
              type: petshop.schedule
              example: !include examples/schedules/time/get_200.json 
    put:
      description: | 
        Update all information for one time
      body:
        application/json:
          example: !include examples/schedules/time/put_request.json
          type: petshop.schedule
      responses: 
        200:
          description: Ok: Successful response, update information (All)
          body:
            application/json:
              type: object
              example: |
                { 
                  "status": 200, 
                  "message": "Successful updated! (All)" 
                }
      patch:
        description: |
          Update partial information for time
        body:
          application/json:
            example: !include examples/schedules/time/patch_200.json
            type: petshop.schedule
        responses: 
          200:
            description: Ok: Successful response, update information (partial)
            body:
              application/json:
                example: |
                  { 
                    "status": 200, 
                    "message": "Successful updated! (Partial)" 
                  }
                type: petshop.schedule
          data: 
            type: petshop.schedule
          204: 
            description: No Content.
      delete:
        description: |
          Delete information about time
        responses:
          204:
          description: No Content.
/employees:
  description: |
    employees of the petshop
  type: collection
  get: 
    description: |
      employee list
    is: [pageable , expandable]
    queryParameters:
      employee.id:
        description: |
          employee id
        type: number
        required: false
        example: 1
      employee.name:
        description: |
          employee name
        type: string
        required: false
        example: "Juan Carlos Martinez Hernandez"
      employee.age:
        description: |
          employee age
        type: number
        required: false
        example: 25
      employee.position:
        description: |
          employee position in petshop
        type: string
        required: false
        example: "Vendedor"
      employee.contact:
        description: |
          employee contact number
        type: number
        required: false
        example: 5553344334
    responses:
      200:
        body:
          application/json:
            type: employees
            example: !include examples/employees/get_200.json
  post:
    body: 
      application/json:
        properties:
          employee.name:
            type: string
            required: true
            example: "Juan Carlos Martinez Hernandez"
          employee.age:
            type: number
            required: true
            example: 25
          petemployeeshop.position:
            type: string
            required: true
            example: "vendedor"
          employee.contact:
            type: string
            required: false
            example: 3323234434
    responses:
      200:
        body:
          application/json:
            type: employee
            example: !include examples/employees/get_200.json
  /{employee-id}:
    get:
      description: |
        Service to get a employee information
      uriParameters:
        employee_id:
          type: string
          description: employee identifier
          # minLength: 1
          # maxLength: 10
      responses:
        200:
          body:
            application/json:
              type: employee
              example: !include examples/employees/employee_id/get_200.json
    put:
      description: |
        Service to update a employee
      body:
        application/json:
          properties:
            employee_id:
              type: string
              required: true
              example: 1
            name:
              type: string
              required: false
              example: "Francisco Arellano Torres"
            age:
              type: number
              required: true
              example: 30
            position:
              type: string
              required: false
              example: "Veterinario"
            contact:
              type: string
              required: false
              example: 3392849394
      responses:
        200:
          body:
            application/json:
              example: !include examples/employees/employee_id/put_200.json
    patch:
      description: |
        Service to update a employee
      body:
        application/json:
          properties:
            employee_id:
              type: string
              required: true
              example: 1
            name:
              type: string
              required: true
              example: "Francisco Arellano Torres"
            age:
              type: number
              required: true
              example: 30
            position:
              type: string
              required: false
              example: "Veterinario"
            contact:
              type: string
              required: false
              example: 3392849394
      responses:
        200:
          body:
            application/json:
              example: !include examples/employees/employee_id/patch_200.json
    delete:
      description: |
        Service to delete a employee
      responses:
        204:
          body:
            application/json:
              example: !include examples/employees/employee_id/delete_204.json
/products:
  type: union
  of:
    - animal
    - accesory
    - food
    - petshop
  description: |
    product types in store
  get:
    is: [pageable]
    description: |
      products lists
    queryParameters:
      product.id:
        description: |
          product id
        type: number
        required: true
        example: 1
      product.type:
        description: |
          product type
        type: string
        required: true
        example: "Pechera"
      product.price:
        description: |
          product price
        type: number
        required: true
        example: 450.00
      product.quantity:
        description: |
          products in stock
        type: number
        required: true
        example: 30
      product.description:
        description: |
          product description
        type: string
        required: true
        example: "Pechera de cuero para perro raza grande, adulto"      
    responses:
      200:
        body:
          application/json:
            type: products
            example: !include examples/products/get_200.json
  post:
    body:
      application/json:
        properties:
          product.type:
            type: string
            required: true
            example: "Pechera"
          product.price:
            type: number
            required: true
            example: 450.00
          product.description:
            type: string
            required: true
            example: "Pechera de cuero para perro, raza grande, adulto"
          product.quantity:
            type: number
            required: false
            example: 30
    responses:
        200:
          body:
            application/json:
              type: petshop
              example: !include examples/products/product_id/post_200.json
  /{product-id}:
    get:
      uriParameters:
        product-id:
          type: string
          description: product identifier
          # minLength: 1
          # maxLength: 10
      responses:
        200:
          body:
            application/json:
              type: product
              example: !include examples/products/product_id/get_200.json
    put:
      body:
        application/json:
          properties:
            product.type:
              type: string
              required: true
              example: "Pechera"
            product.price:
              type: number
              required: true
              example: 400.00
            product.quantity:
              type: number
              required: false
              example: 30
            product.description:
              type: string
              required: false
              example: "Pechera de cuero para perro, raza grande, adulto"
      responses:
        200:
          body:
            application/json:
              example: !include examples/products/product_id/put_200.json
    patch:
      body:
        application/json:
          properties:
            product.type:
              type: string
              required: true
              example: "Pechera"
            product.price:
              type: number
              required: true
              example: 400.00
            product.quantity:
              type: number
              required: false
              example: 30
            product.description:
              type: string
              required: false
              example: "Pechera de cuero para perro, raza grande, adulto"
      responses:
        200:
          body:
            application/json:
              example: !include examples/products/product_id/patch_200.json
    delete:
      responses:
        200:
          body:
            application/json:
              example: !include examples/products/product_id/delete_200.json
/services:
  description: |
    services collection resource used to create new services
  type: service
  get:
    description: |
      lists of all services on specific shop
    is: pageable, expandable
    queryParameters:
      service-id:
        description: |
          service id
        type: string
        required: false
        example: '1964401'
      kind:
        description: |
          type of service
        type: string
        enum: [vaccine, beauty, consultation]
        enumDescription:
          - vaccine: vaccination scheme application  
          - beauty: haircut, nail cutting, showers
          - consultation: check with a doctor
        required: false
      petshop-id:
        description: |
          petshop id
        type: string
        required: false
        example: '589'
    responses:
      200:
        description: Successful
        body:
          application/json:
            type: service
            example: !include examples/services/get_200.json
  post:
    description: |
      Post a new service
    body:
      application/json:
        example: !include examples/services/post_request.json
        description: JSON input example for the call POST /service
        displayName: Full JSON input example
        type: petshop.service
    responses:
      200:
        description: Successful
        body:
          application/json:
            type: service
            example: !include examples/services/post_200.json
  /{service-id}:
    description: |
      Resource for managing the detail of the service
    type: collection-item
    uriParameters:
      service-id:
        type: string
        description: service identifier
    get:
      description: |
        Get a specific service
      responses:
        200:
          description: Successful
          body:
            application/json:
              type: petshop.service
              example: !include examples/services/service_id/get_200.json
    put:
      description: |
        Resource to manage the update of the service of the pet store, except its identifier.
      body:
      application/json:
        example: !include examples/services/service_id/put_request.json
				type: petshop.service
      responses:
        200:
          description: Successful
          body:
            application/json:
              type: object
              example: !include examples/services/service_id/put_200.json
    patch:
      description: |
        Patch a specific service
      body:
      application/json:
        example: !include examples/services/service_id/patch_request.json
				type: petshop.service
      responses:
        200:
          description: Successful
          body:
            application/json:
              type: object
              example: !include examples/services/service_id/patch_200.json
        data: 
          type: petshop.service
        204: 
          description: No Content.
    delete:
      description: |
        Delete a specific service
      responses:
        204:
          description: No Content.
  /{kind}:
    description: |
      Resource for managing the detail of kind of service
    type: collection-item
    uriParameters:
      kind:
        type: enum
        description: kind enum
    get:
      description: |
        Get a kind of service
      responses:
        200:
          description: Successful
          body:
            application/json:
              type: service
              example: !include examples/services/kind/get_200.json
    put:
      description: |
        Put a type of service
      body:
      application/json:
        example: !include examples/services/kind/put_request.json
				type: petshop.service
      responses:
        200:
          description: Successful
          body:
            application/json:
              type: object
              example: !include examples/services/kind/put_200.json
    patch:
      description: |
        Patch a type of service
      body:
      application/json:
        example: !include examples/services/kind/patch_request.json
				type: petshop.service
      responses:
        200:
          description: Successful
          body:
            application/json:
              type: service
              example: !include examples/services/kind/patch_200.json
        data: 
          type: petshop.service
        204: 
          description: No Content.
    delete:
      description: |
        Delete a specific kind of service
      responses:
        204:
          description: No Content.
  /{petshop-id}:
    description: |
      Resource for managing the detail of kind of service
    type: collection-item
    uriParameters:
      petshop_id:
        type: string
        description: indentifier of petshop
    get:
      description: |
        Get a petShop id of Service
      responses:
        200:
          description: Successful
          body:
            application/json:
              type: service
              example: !include examples/services/petshop/get_200.json
    put:
      description: |
        Put a petShop of service
      body:
      application/json:
        example: !include examples/services/petshop/put_request.json
				type: petshop.service
      responses:
        200:
          description: Successful
          body:
            application/json:
              type: service
              example: !include examples/services/petshop/put_200.json
    patch:
      description: |
        Patch a petShop of service
      body:
      application/json:
        example: !include examples/services/petshop/patch_request.json
				type: petshop.service
      responses:
        200:
          description: Successful
          body:
            application/json:
              type: service
              example: !include examples/services/petshop/patch_200.json
        data: 
          type: petshop.service
        204: 
          description: No Content.
    delete:
      description: |
        Delete a specific pet shop
      responses:
        204:
          description: No Content.
/food:
  description: |
    food in the shop
  type: collection
  get: 
    is: [pageable]
    description: |
      food list
    queryParameters: 
      food.id:
        description: |
          food id
        type: number
        required: true
        example: 1
      food.pet:
        description: |
        type: string
        required: true
        example: ""
      food.brand:
        description: |
        type: string
        required: true
        example: ""
      food.presentation:
        description: |
        type: string
        required: true
        example: ""
    responses: 
      200:
        body: 
          application/json:
            type: foods
            example: !include examples/foods/get_200.json
  post:
    body: 
      application/json:
        food.id:
          type: number
          required: true
          example: 1
        food.pet:
          type: string
          required: true
          example: ""
        food.brand:
          type: string
          required: true
          example: ""
        food.presentation:
          type: string
          required: true
          example: ""
    responses: 
      200:
        body: 
          application/json:
            type: food
            example: !include examples/foods/post_200.json
  /{food-id}:
    get:
      uriParameters:
        food-id:
          type: number
          description: food identifier
      responses:
        200:
          body: 
            application/json:
              type: food
              example: !include examples/foods/food_id/get_200.json
    put:
      body:
        application/json:
          properties:
            food.pet:
              type: string
              required: true
              example: ""
            food.brand:
              type: string
              required: true
              example: ""
            food.presentation:
              type: string
              required: true
              example: ""
      responses: 
        200:
          body: 
            application/json:
              example: !include examples/foods/food_id/put_200.json
    patch:
      body:
        application/json:
          properties:
            food.pet:
              type: string
              required: true
              example: ""
            food.brand:
              type: string
              required: true
              example: ""
            food.presentation:
              type: string
              required: true
              example: ""
      responses: 
        200:
          body: 
            application/json:
              example: !include examples/foods/food_id/patch_200.json
    delete:
      responses:
        200:
          body:
            application/json:
              example: !include examples/foods/food_id/delete_200.json
# Servicio restless (Vacunas)
/getDatesReport:
  get:
    is: [ assets.paging ]
    description: |
    queryParameters:
      client.id:
        description: |
          client id
        type: number
        required: false
        example: 1964401
      petshop.id:
        description: |
          petshop id
        type: string
        required: false
        example: 1964401
      service.id:
        description: |
          service id
        type: number
        required: false
        example: 1964401
    responses:
      200:
        body:
          application/json:
            type: service
            example: !include examples/getDatesReport/get_200.json
/contacts:
  description: contacts registered in pet shop
  type: collection
  get:
    description: List of all contacts that exist in petshop
    is: [pageable, expandable]
    queryParameters:
      contact-id:
        description: id of contact
        type: string
        required: false
        example: 1
      address-id:
        description: id of address entity, that represent relation between contact-address
        type: number
        required: false
        example: 1
      phone-id:
        description: id of phone entity, that represent relation between contact-phone
        type: string
        required: false
        example: 1
      email-id:
        description: id of email entity, that represent relation between contact-email
        type: string
        required: false
        example: 1
    responses:
      200:
        description: Get all contacts that exist in petshop, with status: OK
        body:
          application/json:
            type: petshop.contacts
            example: !include examples/contacts/get_200.json
  post:
    description: Create a new contact for petshop
    body: 
      application/json: 
        example: !include examples/contacts/post_request.json
        description: JSON input example for the call POST /contacts
        displayName: Full JSON input example
    responses:
        200:
          description: Contact successful created
          body:
            application/json:
              type: petshop.contact
              example: !include examples/contacts/post_200.json
  /{contact-id}:
    description: Resource for managing the detail of the contact
    type: collection-item
    uriParameters: 
      contact-id: 
        type: string
        description: identifier of contact
    get:
      description: Service for retrieving the detail of a contact
      responses:
        200:
          description: Get detail about a contact
          body:
            application/json:
              type: petshop.contact
              example: !include examples/contacts/contact_id/get_200.json
    put:
      description: Resource to manage the update of the registration of the contact, except its identifier.
      body:
        application/json:
          type: petshop.contact
          example: !include examples/contacts/contact_id/put_request.json
      responses:
        200: 
          description: Contact successful updated
          body:
            application/json:
              type: petshop.contact
              example: !include examples/contacts/contact_id/put_200.json
    patch:
      description: Resource to manage the partial update of the contact registration, except its identifier.
      body:
        application/json:
          type: petshop.contact
          example: !include examples/contacts/contact_id/patch_request.json
      responses:
        200: 
          description: Contact partial successful updated
          body:
            application/json:
              type: petshop.contact
              example: !include examples/contacts/contact_id/patch_200.json
    delete:
      description: Service for delete a contact.
      responses:
        204:
          description: No Content.
            
/accessories:
  description: |
    Accessories sold by the pet store
  type: collection
  get:
    is: [pageable, expandable]
    description: |
      Accessory List
    queryParameters:
      id:
        description: |
          Accessory List Identifier
        type: string
        required: true
        example: "KCP01"
      type:
        description: |
          Type of accessories
        type: string
        required: true
        example: "Large dog leash"
      material:
        description: |
          Material from which it is made
        type: string
        required: true
        eexample: "Cotton"
      color:
        description: |
          Accessories color
        type: string
        required: true
        example: "Black"
      brand:
        description: |
          Accessory brand
        type: string
        required: true
        example: "Karruter"
    responses:
      200:
        body:
          application/json:
            type: accesory
            example: !include examples/accesories/get_200.json
  post:
    body:
      application/json:
        properties:
          type:
            type: string
            required: true
            example: "Medium dog leash"
          material:
            type: string
            required: true
            example: "Plastic"
          color:
            type: string
            required: true
            example: "Orange"
          brand:
            type: string
            required: true
            example: "Jimborroso"
    responses:
      200:
        body:
          application/json:
            type: accesory
            example: !include examples/accessories/post_200.json

  /{accesories-id}:
    get:
      uriParameters:
        id:
          type: string
          description: Accessory Identifier
      responses:
        200:
          body:
            application/json:
              type: accesory
              example: !include examples/accessories/accesory_id/get_200.json
    put:
      body:
        application/json:
          properties:
            type:
              type: string
              required: true
              example: "Large dog leash"
            color:
              type: string
              required: true
              example: "Green"
            material:
              type: string
              required: true
              example: "Cotton"
            brand:
              type: string
              required: true
              example: "Karruter"
      responses:
        200:
          body:
            application/json:
              example: !include examples/accesories/accesory_id/put_200.json
    patch:
      body:
        application/json:
          properties: 
            type:
              type: string
              required: false
              example: "Large dog leash"
            color:
              type: string
              required: false
              example: "Purple"
            material:
              type: string
              required: falsee
              example: "Cotton"
            brand:
              type: string
              required: false
              example: "Karruter"
      responses:
        200:
          body:
            application/json:
              example: !include examples/accessories/accessory_id/patch_200.json

/products:
  description: |
    List of products from a pet store
  type: products
  get:
    is: [assets.paging, expandable]
    description: |
      List of products from a pet store
    queryParameters: 
      id:
        description: |
          Product List Identifier
        type: string
        required: true
        example: "FDA001"
      type:
        description: |
         Kind of product
        type: string
        required: true
        example: "Adult dog food" 
      price:
        description: |
          Price of the product
        type: string
        required: true
        example: 1000
      quantity:
        description: |
          Quantity of products requested
        type: number
        required: true
        example: 1000
      description:
        description: |
          Product description
        type: stirng
        required: true
        example: "Adult dog food"
      animal-id:
        description: |
          Animal identifier related to the product
        type: string
        required: true
        example: "DASB01"
      food-id:
        description: |
          Product food identifier
        type: string
        required: true
        example: "FDAS01"
      accessory-id:
        description: |
          Accessory product Identifier
        type: string
        required: true
        example: "KCP01"
      petshop-id:
        description: |
          Identifier of the store where the product is located
        type: string
        required: true
        example: "MXAZC01"
    responses:
      200:
        body:
          application/json:
            example: !include examples/products/get_200.json
  post:
    body:
      application/json:
        properties:
          type:
            type: string
            required: true
            example: "Adult dog food" 
          price:
            type: string
            required: true
            example: 1000
          quantity:
            type: number
            required: true
            example: 1000
          description:
            type: stirng
            required: true
            example: "Adult dog food"
          animal-id:
            type: string
            required: true
            example: "DASB01"
          food-id:
            type: string
            required: true
            example: "FDAS01"
          accessory-id:
            type: string
            required: true
            example: "KCP01"
          petshop-id:
            type: string
            required: true
            example: "MXAZC01"
      responses:
        200:
          body:
            application/json:
              example: !include examples/products/post_200.json

  /{products-id}:
    get:
      uriParameters:
        id:
          type: string
          description: Product Identifier
      responses:
        200:
          body:
            application/json:
              type: accesory
              example: !include examples/products/product_id/get_200.json
    put:
      body:
        application/json:
          properties:
          id:
            type: string
            required: true
            example: "FDA001"
          type:
            type: string
            required: true
            example: "Big dog house"
          price:
            type: string
            required: true
            example: 10000
          quantity:
            type: number
            required: true
            example: 10
          description:
            type: stirng
            required: true
            example: "House for large dogs"
          animal-id:
            type: string
            required: true
            example: "DASB0"
          food-id:
            type: string
            required: true
            example: "FDAS01"
          accessory-id:
            type: string
            required: true
            example: "KCP01"
          petshop-id:
            type: string
            required: true
            example: "MXAZC01"
      responses:
        200:
          body:
            application/json:
              example: !include examples/products/product_id/put_200.json
    patch:
      body:
        application/json:
          properties: 
            id:
              type: string
              required: true
              example: "FDA001"
            quantity:
              type: number
              required: true
              example: 2
      responses:
        200:
          body:
            application/json:
              example: !include examples/products/product_id/patch_200.json
